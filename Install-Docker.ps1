'#Requires -Version 5.0',
'',
'[CmdletBinding(DefaultParameterSetName="Standard")]',
'param(',
'    [string]',
'    [ValidateNotNullOrEmpty()]',
'    $DockerPath = "https://master.dockerproject.org/windows/x86_64/docker.exe",',
'    [string]',
'    [ValidateNotNullOrEmpty()]',
'    $DockerDPath = "https://master.dockerproject.org/windows/x86_64/dockerd.exe",',
'    [string]',
'    $ExternalNetAdapter,',
'    [switch]',
'    $Force,',
'    [switch]',
'    $HyperV,',
'    [switch]',
'    $SkipDefaultHost,',
'    [string]',
'    $NATSubnet,',
'    [switch]',
'    $NoRestart,',
'    [Parameter(DontShow)]',
'    [switch]',
'    $PSDirect,',
'    [string]',
'    $ContainerBaseImage,',
'    [Parameter(ParameterSetName="Staging", Mandatory)]',
'    [switch]',
'    $Staging,',
'    [switch]',
'    [alias("UseDHCP")]',
'    $TransparentNetwork,',
'    [string]',
'    [ValidateNotNullOrEmpty()]',
'    $TarPath',
')',
'',
'$global:RebootRequired = $false',
'',
'$global:ErrorFile = "$pwd\Install-ContainerHost.err"',
'',
'$global:BootstrapTask = "ContainerBootstrap"',
'',
'$global:HyperVImage = "NanoServer"',
'',
'function',
'New-ContainerTransparentNetwork',
'{',
'    if ($ExternalNetAdapter)',
'    {',
'        $netAdapter = (Get-NetAdapter |? {$_.Name -eq "$ExternalNetAdapter"})[0]',
'    }',
'    else',
'    {',
'        $netAdapter = (Get-NetAdapter |? {($_.Status -eq "Up") -and ($_.ConnectorPresent)})[0]',
'    }',
'',
'    Write-Output "Creating container network (Transparent)..."',
'    New-ContainerNetwork -Name "Transparent" -Mode Transparent -NetworkAdapterName $netAdapter.Name | Out-Null',
'}',
'',
'',
'function',
'Install-ContainerHost',
'{',
'    "If this file exists when Install-ContainerHost.ps1 exits, the script failed!" | Out-File -FilePath $global:ErrorFile',
'    #',
'    # Configure networking',
'    #',
'    if ($($PSCmdlet.ParameterSetName) -ne "Staging")',
'    {',
'        if ($TransparentNetwork)',
'        {',
'            Write-Output "Waiting for Hyper-V Management..."',
'            $networks = $null',
'',
'            try',
'            {',
'                $networks = Get-ContainerNetwork -ErrorAction SilentlyContinue',
'            }',
'            catch',
'            {',
'                #',
'                # If we cant query network, we are in bootstrap mode.  Assume no networks',
'                #',
'            }',
'',
'            if ($networks.Count -eq 0)',
'            {',
'                Write-Output "Enabling container networking..."',
'                New-ContainerTransparentNetwork',
'            }',
'            else',
'            {',
'                Write-Output "Networking is already configured.  Confirming configuration..."',
'                ',
'                $transparentNetwork = $networks |? { $_.Mode -eq "Transparent" }',
'',
'                if ($transparentNetwork -eq $null)',
'                {',
'                    Write-Output "We didnt find a configured external network; configuring now..."',
'                    New-ContainerTransparentNetwork',
'                }',
'                else',
'                {',
'                    if ($ExternalNetAdapter)',
'                    {',
'                        $netAdapters = (Get-NetAdapter |? {$_.Name -eq "$ExternalNetAdapter"})',
'',
'                        if ($netAdapters.Count -eq 0)',
'                        {',
'                            throw "No adapters found that match the name $ExternalNetAdapter"',
'                        }',
'',
'                        $netAdapter = $netAdapters[0]',
'                        $transparentNetwork = $networks |? { $_.NetworkAdapterName -eq $netAdapter.InterfaceDescription }',
'',
'                        if ($transparentNetwork -eq $null)',
'                        {',
'                            throw "One or more external networks are configured, but not on the requested adapter ($ExternalNetAdapter)"',
'                        }',
'',
'                        Write-Output "Configured transparent network found: $($transparentNetwork.Name)"',
'                    }',
'                    else',
'                    {',
'                        Write-Output "Configured transparent network found: $($transparentNetwork.Name)"',
'                    }',
'                }',
'            }',
'        }',
'    }',
'',
'    #',
'    # Install, register, and start Docker',
'    #',
'    if (Test-Docker)',
'    {',
'        Write-Output "Docker is already installed."',
'    }',
'    else',
'    {',
'        if ($NATSubnet)',
'        {',
'            Install-Docker -DockerPath $DockerPath -DockerDPath $DockerDPath -NATSubnet $NATSubnet -ContainerBaseImage $ContainerBaseImage',
'        }',
'        else',
'        {',
'            Install-Docker -DockerPath $DockerPath -DockerDPath $DockerDPath -ContainerBaseImage $ContainerBaseImage',
'        }',
'    }',
'',
'    if ($TarPath)',
'    {',
'        cmd /c "docker load -i `"$TarPath`""',
'    }',
'',
'    Remove-Item $global:ErrorFile',
'',
'    Write-Output "Script complete!"',
'}',
'',
'$global:AdminPriviledges = $false',
'$global:DockerDataPath = "$($env:ProgramData)\docker"',
'$global:DockerServiceName = "docker"',
'',
'function',
'Copy-File',
'{',
'    [CmdletBinding()]',
'    param(',
'        [string]',
'        $SourcePath,',
'        ',
'        [string]',
'        $DestinationPath',
'    )',
'    ',
'    if ($SourcePath -eq $DestinationPath)',
'    {',
'        return',
'    }',
'          ',
'    if (Test-Path $SourcePath)',
'    {',
'        Copy-Item -Path $SourcePath -Destination $DestinationPath',
'    }',
'    elseif (($SourcePath -as [System.URI]).AbsoluteURI -ne $null)',
'    {',
'        if (Test-Nano)',
'        {',
'            $handler = New-Object System.Net.Http.HttpClientHandler',
'            $client = New-Object System.Net.Http.HttpClient($handler)',
'            $client.Timeout = New-Object System.TimeSpan(0, 30, 0)',
'            $cancelTokenSource = [System.Threading.CancellationTokenSource]::new() ',
'            $responseMsg = $client.GetAsync([System.Uri]::new($SourcePath), $cancelTokenSource.Token)',
'            $responseMsg.Wait()',
'',
'            if (!$responseMsg.IsCanceled)',
'            {',
'                $response = $responseMsg.Result',
'                if ($response.IsSuccessStatusCode)',
'                {',
'                    $downloadedFileStream = [System.IO.FileStream]::new($DestinationPath, [System.IO.FileMode]::Create, [System.IO.FileAccess]::Write)',
'                    $copyStreamOp = $response.Content.CopyToAsync($downloadedFileStream)',
'                    $copyStreamOp.Wait()',
'                    $downloadedFileStream.Close()',
'                    if ($copyStreamOp.Exception -ne $null)',
'                    {',
'                        throw $copyStreamOp.Exception',
'                    }      ',
'                }',
'            }  ',
'        }',
'        elseif ($PSVersionTable.PSVersion.Major -ge 5)',
'        {',
'            #',
'            # We disable progress display because it kills performance for large downloads (at least on 64-bit PowerShell)',
'            #',
'            $ProgressPreference = "SilentlyContinue"',
'            Invoke-WebRequest -Uri $SourcePath -OutFile $DestinationPath -UseBasicParsing',
'            $ProgressPreference = "Continue"',
'        }',
'        else',
'        {',
'            $webClient = New-Object System.Net.WebClient',
'            $webClient.DownloadFile($SourcePath, $DestinationPath)',
'        } ',
'    }',
'    else',
'    {',
'        throw "Cannot copy from $SourcePath"',
'    }',
'}',
'',
'',
'function ',
'Test-Admin()',
'{',
'    # Get the ID and security principal of the current user account',
'    $myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()',
'    $myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID)',
'  ',
'    # Get the security principal for the Administrator role',
'    $adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator',
'  ',
'    # Check to see if we are currently running "as Administrator"',
'    if ($myWindowsPrincipal.IsInRole($adminRole))',
'    {',
'        $global:AdminPriviledges = $true',
'        return',
'    }',
'    else',
'    {',
'        #',
'        # We are not running "as Administrator"',
'        # Exit from the current, unelevated, process',
'        #',
'        throw "You must run this script as administrator"   ',
'    }',
'}',
'',
'',
'function ',
'Test-Client()',
'{',
'    return (-not ((Get-Command Get-WindowsFeature -ErrorAction SilentlyContinue) -or (Test-Nano)))',
'}',
'',
'',
'function ',
'Test-Nano()',
'{',
'    $EditionId = (Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion" -Name "EditionID").EditionId',
'',
'    return (($EditionId -eq "ServerStandardNano") -or ',
'            ($EditionId -eq "ServerDataCenterNano") -or ',
'            ($EditionId -eq "NanoServer") -or ',
'            ($EditionId -eq "ServerTuva"))',
'}',
'',
'function ',
'Install-Docker()',
'{',
'    [CmdletBinding()]',
'    param(',
'        [string]',
'        [ValidateNotNullOrEmpty()]',
'        $DockerPath = "https://master.dockerproject.org/windows/x86_64/docker.exe",',
'',
'        [string]',
'        [ValidateNotNullOrEmpty()]',
'        $DockerDPath = "https://master.dockerproject.org/windows/x86_64/dockerd.exe",',
'                ',
'        [string]',
'        [ValidateNotNullOrEmpty()]',
'        $NATSubnet,',
'',
'        [switch]',
'        $SkipDefaultHost,',
'',
'        [string]',
'        $ContainerBaseImage',
'    )',
'',
'    Test-Admin',
'',
'    Write-Output "Installing Docker..."',
'    Copy-File -SourcePath $DockerPath -DestinationPath $env:windir\System32\docker.exe',
'        ',
'    Write-Output "Installing Docker daemon..."',
'    Copy-File -SourcePath $DockerDPath -DestinationPath $env:windir\System32\dockerd.exe',
'    ',
'    $dockerConfigPath = Join-Path $global:DockerDataPath "config"',
'    ',
'    if (!(Test-Path $dockerConfigPath))',
'    {',
'        md -Path $dockerConfigPath | Out-Null',
'    }',
'',
'    #',
'    # Register the docker service.',
'    # Configuration options should be placed at %programdata%\docker\config\daemon.json',
'    #',
'    Write-Output "Configuring the docker service..."',
'',
'    $daemonSettings = New-Object PSObject',
'        ',
'    $certsPath = Join-Path $global:DockerDataPath "certs.d"',
'',
'    if (Test-Path $certsPath)',
'    {',
'        $daemonSettings | Add-Member NoteProperty hosts @("npipe://", "0.0.0.0:2376")',
'        $daemonSettings | Add-Member NoteProperty tlsverify true',
'        $daemonSettings | Add-Member NoteProperty tlscacert (Join-Path $certsPath "ca.pem")',
'        $daemonSettings | Add-Member NoteProperty tlscert (Join-Path $certsPath "server-cert.pem")',
'        $daemonSettings | Add-Member NoteProperty tlskey (Join-Path $certsPath "server-key.pem")',
'    }',
'    elseif (!$SkipDefaultHost.IsPresent)',
'    {',
'        # Default local host',
'        $daemonSettings | Add-Member NoteProperty hosts @("npipe://")',
'    }',
'',
'    if ($NATSubnet -ne "")',
'    {',
'        $daemonSettings | Add-Member NoteProperty fixed-cidr $NATSubnet',
'    }',
'',
'    $daemonSettingsFile = Join-Path $dockerConfigPath "daemon.json"',
'',
'    $daemonSettings | ConvertTo-Json | Out-File -FilePath $daemonSettingsFile -Encoding ASCII',
'    ',
"    & dockerd --register-service --service-name $global:DockerServiceName",
'',
'    Start-Docker',
'',
'    #',
'    # Waiting for docker to come to steady state',
'    #',
'    Wait-Docker',
'',
'    if(-not [string]::IsNullOrEmpty($ContainerBaseImage)) {',
'        Write-Output "Attempting to pull specified base image: $ContainerBaseImage"',
'        docker pull $ContainerBaseImage',
'    }',
'',
'    Write-Output "The following images are present on this machine:"',
'    ',
'    docker images -a | Write-Output',
'',
'    Write-Output ""',
'}',
'',
'function ',
'Start-Docker()',
'{',
'    Start-Service -Name $global:DockerServiceName',
'}',
'',
'',
'function ',
'Test-Docker()',
'{',
'    $service = Get-Service -Name $global:DockerServiceName -ErrorAction SilentlyContinue',
'',
'    return ($service -ne $null)',
'}',
'',
'',
'function ',
'Wait-Docker()',
'{',
'    Write-Output "Waiting for Docker daemon..."',
'    $dockerReady = $false',
'    $startTime = Get-Date',
'',
'    while (-not $dockerReady)',
'    {',
'        try',
'        {',
'            docker version | Out-Null',
'',
'            if (-not $?)',
'            {',
'                throw "Docker daemon is not running yet"',
'            }',
'',
'            $dockerReady = $true',
'        }',
'        catch ',
'        {',
'            $timeElapsed = $(Get-Date) - $startTime',
'',
'            if ($($timeElapsed).TotalMinutes -ge 1)',
'            {',
'                throw "Docker Daemon did not start successfully within 1 minute."',
'            } ',
'',
'            # Swallow error and try again',
'            Start-Sleep -sec 1',
'        }',
'    }',
'    Write-Output "Successfully connected to Docker Daemon."',
'}',
'',
'try',
'{',
'    Install-ContainerHost',
'}',
'catch ',
'{',
'    Write-Error $_',
'}'
